# -*- coding: utf-8 -*-
"""HOMEWORK 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cXlH0VsUzOLzA_0dwWjmcZmlnyZ5dTa9

**Install requirements**
"""

!pip3 install 'torch==1.3.1'
!pip3 install 'torchvision==0.5.0'
!pip3 install 'Pillow-SIMD'
!pip3 install 'tqdm'

"""**Import libraries**"""

import os
import os.path
import sys
import logging

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Subset, DataLoader
from torch.backends import cudnn

import torchvision
from torchvision import transforms
from torchvision.datasets import VisionDataset
from torchvision.models import alexnet
from torchvision.models import resnet34
from torchvision.models import vgg19

from PIL import Image
from tqdm import tqdm

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
import statistics

"""**Caltech Class**"""

def pil_loader(path):
    with open(path, 'rb') as f:
        img = Image.open(f)
        return img.convert('RGB')

class Caltech(VisionDataset):
    def __init__(self, root, split='train', transform=None, target_transform=None):
        super(Caltech, self).__init__(root, transform=transform, target_transform=target_transform)

        self.split = split

        name_percorso=self.root.split("/")[0]+"/"+split+".txt"
        
        #creazione del dataset con i nomi delle immagini da prelevare
        name_dataset=pd.read_csv(name_percorso, header = None, names="a")
        self.name_dataset_finale=name_dataset[~name_dataset.a.str.contains("BACKGROUND_Google")]
        self.name_dataset_finale.index = range(len(self.name_dataset_finale))

        #creazione lista per convertire label
        map_label=os.listdir(self.root)
        map_label.remove("BACKGROUND_Google")
        map_label=sorted(map_label)
        
        #creazione del dataset con immagini PIL  e corrispondenti label
        self.dataset=[]
        self.labels=[]
        for elemento in self.name_dataset_finale["a"]:
            lista=elemento.split("/")
            label=map_label.index(lista[0])
            name=lista[1]
            percorso=root+"/"+lista[0]+"/"+name
            image=pil_loader(percorso)
            self.dataset.append(image)
            self.labels.append(label) 

    def __getitem__(self, index):
        #if index>=len(self.dataset):
       #   s="No element associated with this index, the biggest index possible is "+str(len(self.dataset)-1)
        #  return s

        image=self.dataset[index]
        label=self.labels[index]
        
        if self.transform is not None:
            image = self.transform(image)

        return image, label

    def __len__(self):
        length = len(self.dataset) # Provide a way to get the length (number of elements) of the dataset
        return length



"""**TRAIN FROM SCRATCH**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 256        # Higher batch sizes allows for larger learning rates. An empirical heuristic suggests that, when changing
                        # the batch size, learning rate should change by the same factor to have comparable results

LR = 5e-2               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 40         # Total number of training epochs (iterations over dataset)
STEP_SIZE = 15          # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.1             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),                                 # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),                             # Crops a central square patch of the image
                                                                                              # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                                              # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(),                                  # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # Normalizes tensor with mean and standard deviation
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))                                    
])

"""**Prepare Dataset**"""

if not os.path.isdir('./Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git
  !mv 'Homework2-Caltech101' 'Caltech101'

DATA_DIR = 'Caltech101/101_ObjectCategories'

train_dataset_totale = Caltech(DATA_DIR, split='train',  transform=train_transform)

test_dataset = Caltech(DATA_DIR, split='test', transform=eval_transform)

target_list=[]
for i in range(len(train_dataset_totale)):
  target_list.append(train_dataset_totale[i][1])

indici=np.arange(0,len(target_list))
indici_train,indici_val,y_tr,y_va=train_test_split(indici,target_list,train_size=0.5,stratify=target_list)

set(indici_train).intersection(set(indici_val))

for i in range(0,len(set(target_list))):
  uno=y_tr.count(i)
  due=y_va.count(i)
  if abs(uno-due)>1:
    print(f"CLASSE {i} ERRORE")

train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

target_list_test=[]
for i in range(len(test_dataset)):
  target_list_test.append(test_dataset[i][1])

def conta_occorrenze(lista):
  classi=set(lista)
  occorrenze=[]
  for classe in classi:
    occorrenze.append(lista.count(classe))
  return classi, occorrenze

classi_train,occorrenze_train=conta_occorrenze(target_list)
classi_test,occorrenze_test=conta_occorrenze(target_list_test)

print(classi_train.difference(classi_test))
print(classi_test.difference(classi_train))

x = np.arange(len(classi_train))
width = 0.40 

fig, ax = plt.subplots(figsize=(25,4))
rects1 = ax.bar(x - width/2, occorrenze_train, width, label='Train')
rects2 = ax.bar(x + width/2, occorrenze_test, width, label='Test')

ax.set_ylabel('Occurrences')
ax.set_title('Occurrences in train and test')
ax.set_xticks(x)
ax.set_xticklabels(classi_train)
ax.set_xlim(-1,101)
ax.legend()

fig.tight_layout()

plt.savefig("Data Exploration")

plt.show()

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

net = alexnet() # Loading AlexNet model

# AlexNet has 1000 output neurons, corresponding to the 1000 ImageNet's classes
# We need 101 outputs for Caltech-101
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) # nn.Linear in pytorch is a fully connected layer
                                                 # The convolutional layer is nn.Conv2d

# We just changed the last layer of AlexNet with a new fully connected layer with 101 outputs
# It is strongly suggested to study torchvision.models.alexnet source code

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
parameters_to_optimize = net.parameters() # In this case we optimize over all the parameters of AlexNet

# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0

for images, labels in tqdm(val_dataloader):
  
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(val_dataset))

print('Validation Accuracy: {}'.format(accuracy))

'''
best_model=net
'''

#Il range deve essere cambiato a seconda del numero di epoche
plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_acc_train,label="Train")
plt.plot(range(1,31),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY.LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Accuracy, LR=1e-3, step size=20 , Epochs=30")
plt.show()

#Il range deve essere cambiato a seconda del numero di epoche

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_loss_train, label ="Train")
plt.plot(range(1,31),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(4,5)
plt.legend()
plt.title("LOSS. LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Loss,LR=1e-3, step size=20 , Epochs=30")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = alexnet()
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) 

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

#net=best_model
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))



"""**TRANSFER LEARNING**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 256        # Higher batch sizes allows for larger learning rates. An empirical heuristic suggests that, when changing
                         # the batch size, learning rate should change by the same factor to have comparable results

LR = 5e-3               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 15         # Total number of training epochs (iterations over dataset)
STEP_SIZE =5            # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.2             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),      # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),  # Crops a central square patch of the image
                                                                   # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                   # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(), # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
                                     
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
])

"""**Prepare Dataset**"""

if not os.path.isdir('./Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git
  !mv 'Homework2-Caltech101' 'Caltech101'

DATA_DIR = 'Caltech101/101_ObjectCategories'

train_dataset_totale = Caltech(DATA_DIR, split='train',  transform=train_transform)

test_dataset = Caltech(DATA_DIR, split='test', transform=eval_transform)

target_list=[]
for i in range(len(train_dataset_totale)):
  target_list.append(train_dataset_totale[i][1])

indici=np.arange(0,len(target_list))
indici_train,indici_val,y_tr,y_va=train_test_split(indici,target_list,train_size=0.5,stratify=target_list)

set(indici_train).intersection(set(indici_val))

for i in range(0,len(set(target_list))):
  uno=y_tr.count(i)
  due=y_va.count(i)
  if abs(uno-due)>1:
    print("errore")

train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

#Loading Alex Net model, pretrained=True allows to have a model pre-trained on ImageNet
net = alexnet(pretrained=True)

# AlexNet has 1000 output neurons, corresponding to the 1000 ImageNet's classes
# We need 101 outputs for Caltech-101
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) # nn.Linear in pytorch is a fully connected layer
                                                 # The convolutional layer is nn.Conv2d

# We just changed the last layer of AlexNet with a new fully connected layer with 101 outputs
# It is strongly suggested to study torchvision.models.alexnet source code

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
parameters_to_optimize = net.parameters() # In this case we optimize over all the parameters of AlexNet

# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)
#used Adam optimizer
#optimizer=optim.Adam(parameters_to_optimize,lr=LR)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0

for images, labels in tqdm(val_dataloader):
  
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(val_dataset))

print('Validation Accuracy: {}'.format(accuracy))

'''
best_model=net
'''

#il variare del range deve essere modificato a seconda del numero di epoche
plt.figure(figsize=(10,4))

plt.plot(range(1,16),list_acc_train,label="Train")
plt.plot(range(1,16),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,16))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY. LR=5e-3, step size=5 , Epochs=15, gamma=0.2")
plt.savefig("Accuracy, LR=5e-3, step size=5 , Epochs=15")
plt.show()

#il variare del range deve essere modificato a seconda del numero di epoche
plt.figure(figsize=(10,4))

plt.plot(range(1,16),list_loss_train, label ="Train")
plt.plot(range(1,16),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,16))
plt.ylim(0,5)
plt.legend()
plt.title("LOSS. LR=5e-3, step size=5 , Epochs=15, gamma=0.2")
plt.savefig("Loss,LR=5e-3, step size=5 , Epochs=15")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = alexnet(pretrained=True)
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) 

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

#net=best_model
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))



"""**FROZEN**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 256                         # the batch size, learning rate should change by the same factor to have comparable results

LR = 5e-3               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 15         # Total number of training epochs (iterations over dataset)
STEP_SIZE = 5          # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.2             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

'''
# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),                                             # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),                                         # Crops a central square patch of the image
                                                                                                          # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                                                          # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(),                                              # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))  # Normalizes tensor with mean and standard deviation of IMAGENET
                                     
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
])

"""**Prepare Dataset**"""

'''
train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

"""**Prepare Dataloaders**"""

'''
# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

#Loading Alex Net model, pretrained=True allows to have a model pre-trained on ImageNet
net = alexnet(pretrained=True)

# AlexNet has 1000 output neurons, corresponding to the 1000 ImageNet's classes
# We need 101 outputs for Caltech-101
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) # nn.Linear in pytorch is a fully connected layer
                                                 # The convolutional layer is nn.Conv2d

# We just changed the last layer of AlexNet with a new fully connected layer with 101 outputs
# It is strongly suggested to study torchvision.models.alexnet source code

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
parameters_to_optimize = net.features.parameters() # optimize convolutional
#parameters_to_optimize = net.classifier.parameters() # optimize fc


# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0

for images, labels in tqdm(val_dataloader):
  
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(val_dataset))

print('Validation Accuracy: {}'.format(accuracy))

#cambiare range a seconda delle epoche
plt.figure(figsize=(10,4))

plt.plot(range(1,16),list_acc_train,label="Train")
plt.plot(range(1,16),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,16))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY. LR=5e-3, step size=5 , Epochs=15, gamma=0.2")
plt.savefig("Accuracy, LR=5e-3, step size=5 , Epochs=15, gamma=0,2")
plt.show()

#cambaire range a secodna delle epoche
plt.figure(figsize=(10,4))

plt.plot(range(1,16),list_loss_train, label ="Train")
plt.plot(range(1,16),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,16))
plt.ylim(0,5)
plt.legend()
plt.title("LOSS. LR=5e-3, step size=5 , Epochs=15, gamma=0.2")
plt.savefig("Loss,LR=5e-3, step size=5 , Epochs=15, gamma=0,2")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = alexnet(pretrained=True)
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) 

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.classifier.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()
  

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))



"""**DATA AUGMENTATION**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 256        # the batch size, learning rate should change by the same factor to have comparable results

LR = 5e-3               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 30         # Total number of training epochs (iterations over dataset)
STEP_SIZE = 20          # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.1             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),      # Resizes short size of the PIL image to 256
                                      transforms.RandomCrop(224),  # Crops a central square patch of the image
                                                                   # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                   # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ColorJitter(brightness=[1,1],contrast=[1,1],saturation=1,hue=0),
                                      #transforms.ColorJitter(brightness=1,contrast=1,saturation=1,hue=0.5),
                                      #transforms.ColorJitter(brightness=0.25,contrast=0.25,saturation=1,hue=0),
                                      #transforms.ColorJitter(),
                                      #transforms.RandomRotation(45),
                                      #transforms.RandomHorizontalFlip(p=0.5),
                                      transforms.ToTensor(), # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
                                     
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
])

"""**Prepare Dataset**"""

if not os.path.isdir('./Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git
  !mv 'Homework2-Caltech101' 'Caltech101'

DATA_DIR = 'Caltech101/101_ObjectCategories'

train_dataset_totale = Caltech(DATA_DIR, split='train',  transform=train_transform)

test_dataset = Caltech(DATA_DIR, split='test', transform=eval_transform)

target_list=[]
for i in range(len(train_dataset_totale)):
  target_list.append(train_dataset_totale[i][1])

indici=np.arange(0,len(target_list))
indici_train,indici_val,y_tr,y_va=train_test_split(indici,target_list,train_size=0.5,stratify=target_list)

set(indici_train).intersection(set(indici_val))

"""**Prepare Dataset**"""

train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

#Loading Alex Net model, pretrained=True allows to have a model pre-trained on ImageNet
net = alexnet(pretrained=True)

# AlexNet has 1000 output neurons, corresponding to the 1000 ImageNet's classes
# We need 101 outputs for Caltech-101
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) # nn.Linear in pytorch is a fully connected layer
                                                 # The convolutional layer is nn.Conv2d

# We just changed the last layer of AlexNet with a new fully connected layer with 101 outputs
# It is strongly suggested to study torchvision.models.alexnet source code

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
#parameters_to_optimize = net.parameters() 
parameters_to_optimize = net.classifier.parameters() # optimize fc
#parameters_to_optimize = net.features.parameters() # optimize convolutional


# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

acc=[]
for i in range(1,11):
  running_corrects = 0

  for images, labels in tqdm(val_dataloader):
    
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    # Forward Pass
    outputs = net(images)

    # Get predictions
    _, preds = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects += torch.sum(preds == labels.data).data.item()

  # Calculate Accuracy
  accuracy = running_corrects / float(len(val_dataset))

  acc.append(accuracy)

print(statistics.mean(acc))
print(statistics.stdev(acc))

'''
best_model=net
''''

#range to be set accordin number epoch
plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_acc_train,label="Train")
plt.plot(range(1,31),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY. LR=5e-3, step size=20 , Epochs=30")
plt.savefig("Accuracy, LR=5e-3, step size=20 , Epochs=30")
plt.show()

#range to be set accordin number epoch

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_loss_train, label ="Train")
plt.plot(range(1,31),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,5)
plt.legend()
plt.title("LOSS. LR=5e-3, step size=20 , Epochs=30")
plt.savefig("Loss,LR=5e-3, step size=20 , Epochs=30")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = alexnet(pretrained=True)
net.classifier[6] = nn.Linear(4096, NUM_CLASSES) 

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

#net=best_model
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()
  
# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))



"""**RES NET 34**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 64        # the batch size, learning rate should change by the same factor to have comparable results

LR = 1e-3               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 30         # Total number of training epochs (iterations over dataset)
STEP_SIZE = 20          # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.1             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),                                             # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),                                         # Crops a central square patch of the image
                                                                                                          # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                                                          # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(),                                              # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))  # Normalizes tensor with mean and standard deviation of IMAGENET
                                     
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
])

"""**Prepare Dataset**"""

if not os.path.isdir('./Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git
  !mv 'Homework2-Caltech101' 'Caltech101'

DATA_DIR = 'Caltech101/101_ObjectCategories'

train_dataset_totale = Caltech(DATA_DIR, split='train',  transform=train_transform)

test_dataset = Caltech(DATA_DIR, split='test', transform=eval_transform)

target_list=[]
for i in range(len(train_dataset_totale)):
  target_list.append(train_dataset_totale[i][1])

indici=np.arange(0,len(target_list))
indici_train,indici_val,y_tr,y_va=train_test_split(indici,target_list,train_size=0.5,stratify=target_list)

set(indici_train).intersection(set(indici_val))

for i in range(0,len(set(target_list))):
  uno=y_tr.count(i)
  due=y_va.count(i)
  if abs(uno-due)>1:
    print("errore")

train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

net = resnet34(pretrained=True)

net.fc=nn.Linear(512,NUM_CLASSES)

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
#parameters_to_optimize = net.features.parameters() # optimize convolutional
#parameters_to_optimize = net.classifier.parameters() # optimize fc
parameters_to_optimize = net.parameters()



# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0

for images, labels in tqdm(val_dataloader):
  
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(val_dataset))

print('Validation Accuracy: {}'.format(accuracy))

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_acc_train,label="Train")
plt.plot(range(1,31),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY. LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Accuracy, LR=1e-3, step size=20 , Epochs=30")
plt.show()

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_loss_train, label ="Train")
plt.plot(range(1,31),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,5)
plt.legend()
plt.title("LOSS. LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Loss,LR=1e-3, step size=20 , Epochs=30")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = resnet34(pretrained=True)
net.fc=nn.Linear(512,NUM_CLASSES)

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()
  

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))



"""**VGG 19**

**Set Arguments**
"""

DEVICE = 'cuda'         # 'cuda' or 'cpu'

NUM_CLASSES = 101       # 101 + 1: There is a extra Background class that should be removed 

BATCH_SIZE = 32        # the batch size, learning rate should change by the same factor to have comparable results

LR = 1e-3               # The initial Learning Rate


MOMENTUM = 0.9          # Hyperparameter for SGD, keep this at 0.9 when using SGD
WEIGHT_DECAY = 5e-5     # Regularization, you can keep this at the default

NUM_EPOCHS = 30         # Total number of training epochs (iterations over dataset)
STEP_SIZE = 20          # How many epochs before decreasing learning rate (if using a step-down policy)
GAMMA = 0.1             # Multiplicative factor for learning rate step-down

LOG_FREQUENCY = 10

"""**Define Data Preprocessing**"""

# Define transforms for training phase
train_transform = transforms.Compose([transforms.Resize(256),                                             # Resizes short size of the PIL image to 256
                                      transforms.CenterCrop(224),                                         # Crops a central square patch of the image
                                                                                                          # 224 because torchvision's AlexNet needs a 224x224 input!
                                                                                                          # Remember this when applying different transformations, otherwise you get an error
                                      transforms.ToTensor(),                                              # Turn PIL Image to torch.Tensor
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))  # Normalizes tensor with mean and standard deviation of IMAGENET
                                     
])
# Define transforms for the evaluation phase
eval_transform = transforms.Compose([transforms.Resize(256),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)) # Normalizes tensor with mean and standard deviation of IMAGENET
])

"""**Prepare Dataset**"""

if not os.path.isdir('./Caltech101'):
  !git clone https://github.com/MachineLearning2020/Homework2-Caltech101.git
  !mv 'Homework2-Caltech101' 'Caltech101'

DATA_DIR = 'Caltech101/101_ObjectCategories'

train_dataset_totale = Caltech(DATA_DIR, split='train',  transform=train_transform)

test_dataset = Caltech(DATA_DIR, split='test', transform=eval_transform)

target_list=[]
for i in range(len(train_dataset_totale)):
  target_list.append(train_dataset_totale[i][1])

indici=np.arange(0,len(target_list))
indici_train,indici_val,y_tr,y_va=train_test_split(indici,target_list,train_size=0.5,stratify=target_list)

set(indici_train).intersection(set(indici_val))

for i in range(0,len(set(target_list))):
  uno=y_tr.count(i)
  due=y_va.count(i)
  if abs(uno-due)>1:
    print("errore")

train_indexes = indici_train
val_indexes = indici_val

train_dataset = Subset(train_dataset_totale, train_indexes)
val_dataset = Subset(train_dataset_totale, val_indexes)

# Check dataset sizes
print('Train Dataset: {}'.format(len(train_dataset)))
print('Valid Dataset: {}'.format(len(val_dataset)))
print('Test Dataset: {}'.format(len(test_dataset)))

"""**Prepare Dataloaders**"""

# Dataloaders iterate over pytorch datasets and transparently provide useful functions (e.g. parallelization and shuffling)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

"""**Prepare Network**"""

net = vgg19(pretrained=True)

net.classifier[6]=nn.Linear(4096,NUM_CLASSES)

"""**Prepare Training**"""

# Define loss function
criterion = nn.CrossEntropyLoss() # for classification, we use Cross Entropy

# Choose parameters to optimize
# To access a different set of parameters, you have to access submodules of AlexNet
# (nn.Module objects, like AlexNet, implement the Composite Pattern)
# e.g.: parameters of the fully connected layers: net.classifier.parameters()
# e.g.: parameters of the convolutional layers: look at alexnet's source code ;) 
#parameters_to_optimize = net.features.parameters() # optimize convolutional
#parameters_to_optimize = net.classifier.parameters() # optimize fc
parameters_to_optimize = net.parameters()



# Define optimizer
# An optimizer updates the weights based on loss
# We use SGD with momentum
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

# Define scheduler
# A scheduler dynamically changes learning rate
# The most common schedule is the step(-down), which multiplies learning rate by gamma every STEP_SIZE epochs
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

"""**Train**"""

list_loss_train=[]
list_loss_val=[]
list_acc_train=[]
list_acc_val=[]

# By default, everything is loaded to cpu
net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda

cudnn.benchmark # Calling this optimizes runtime

current_step = 0
# Start iterating over the epochs
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  valore=0
  conto=0
  running_corrects_train=0

  # Iterate over the dataset
  for images, labels in train_dataloader:
    # Bring data over the device of choice
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train() # Sets module in training mode

    # PyTorch, by default, accumulates gradients after each backward pass
    # We need to manually set the gradients to zero before starting a new iteration
    optimizer.zero_grad() # Zero-ing the gradients

    # Forward pass to the network
    outputs = net(images)

    # Get predictions
    _, preds_train = torch.max(outputs.data, 1)

    # Update Corrects
    running_corrects_train += torch.sum(preds_train == labels.data).data.item()

    # Compute loss based on output and ground truth
    loss = criterion(outputs, labels)
    valore=valore+loss.item()
    conto=conto+1

    # Log loss
    if current_step % LOG_FREQUENCY == 0:
      print('Step {}, Loss {}'.format(current_step, loss.item()))

    # Compute gradients for each layer and update weights
    loss.backward()  # backward pass: computes gradients
    optimizer.step() # update weights based on accumulated gradients

    current_step += 1
  
  media=valore/conto
  list_loss_train.append(media)

  net.train(False)
  
  running_corrects_val = 0
  valore=0
  conto=0

  for images_val, labels_val in tqdm(val_dataloader):
    images_val = images_val.to(DEVICE)
    labels_val = labels_val.to(DEVICE)
      
    # Forward Pass
    outputs_val = net(images_val)

    
    # Get predictions
    _, preds_val = torch.max(outputs_val.data, 1)

    # Update Corrects
    running_corrects_val += torch.sum(preds_val == labels_val.data).data.item()
    

    loss_val = criterion(outputs_val, labels_val)
    valore=valore+loss_val.item()
    conto=conto+1
  
  media=valore/conto
  list_loss_val.append(media)

    
  # Calculate Accuracy
  accuracy_val = running_corrects_val / float(len(val_dataset))
  print('Validation Accuracy: {}'.format(accuracy_val))
  list_acc_val.append(accuracy_val)
  #Train
  accuracy_train = running_corrects_train / float(len(train_dataset))
  print('Training Accuracy: {}'.format(accuracy_train))
  list_acc_train.append(accuracy_train)
  
  # Step the scheduler
  scheduler.step()

"""**Validation**"""

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0

for images, labels in tqdm(val_dataloader):
  
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()

# Calculate Accuracy
accuracy = running_corrects / float(len(val_dataset))

print('Validation Accuracy: {}'.format(accuracy))

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_acc_train,label="Train")
plt.plot(range(1,31),list_acc_val,label="Validation")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,1)
plt.legend()
plt.title("ACCURACY. LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Accuracy, LR=1e-3, step size=20 , Epochs=30")
plt.show()

plt.figure(figsize=(10,4))

plt.plot(range(1,31),list_loss_train, label ="Train")
plt.plot(range(1,31),list_loss_val, label ="Validation")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.xticks(range(1,31))
plt.ylim(0,5)
plt.legend()
plt.title("LOSS. LR=1e-3, step size=20 , Epochs=30")
plt.savefig("Loss,LR=1e-3, step size=20 , Epochs=30")
plt.show()

"""**Test**"""

#model trained using the entire training ()
train_totale_dataloader = DataLoader(train_dataset_totale, batch_size=BATCH_SIZE, shuffle=True, num_workers=4, drop_last=True)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=4)

net = vgg19(pretrained=True)
net.classifier[6]=nn.Linear(4096,NUM_CLASSES)

criterion = nn.CrossEntropyLoss()
parameters_to_optimize = net.parameters()
optimizer = optim.SGD(parameters_to_optimize, lr=LR, momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)

scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=STEP_SIZE, gamma=GAMMA)

net = net.to(DEVICE)

cudnn.benchmark

current_step = 0
for epoch in range(NUM_EPOCHS):
  print('Starting epoch {}/{}, LR = {}'.format(epoch+1, NUM_EPOCHS, scheduler.get_lr()))

  for images, labels in train_totale_dataloader:
    images = images.to(DEVICE)
    labels = labels.to(DEVICE)

    net.train()

    optimizer.zero_grad() 
    
    outputs = net(images)
    loss = criterion(outputs, labels)

    loss.backward()  
    optimizer.step() 

    current_step += 1

  # Step the scheduler
  scheduler.step()

net = net.to(DEVICE) # this will bring the network to GPU if DEVICE is cuda
net.train(False) # Set Network to evaluation mode

running_corrects = 0
for images, labels in tqdm(test_dataloader):
  images = images.to(DEVICE)
  labels = labels.to(DEVICE)

  # Forward Pass
  outputs = net(images)

  # Get predictions
  _, preds = torch.max(outputs.data, 1)

  # Update Corrects
  running_corrects += torch.sum(preds == labels.data).data.item()
  

# Calculate Accuracy
accuracy = running_corrects / float(len(test_dataset))

print('Test Accuracy: {}'.format(accuracy))

